// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/dhoelle/cryptr"
)

type TokenEncoderDecoder struct {
	DecodeTokensStub        func(string, ...cryptr.DecodeTokensOption) (string, error)
	decodeTokensMutex       sync.RWMutex
	decodeTokensArgsForCall []struct {
		arg1 string
		arg2 []cryptr.DecodeTokensOption
	}
	decodeTokensReturns struct {
		result1 string
		result2 error
	}
	decodeTokensReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	EncodeTokensStub        func(string) (string, error)
	encodeTokensMutex       sync.RWMutex
	encodeTokensArgsForCall []struct {
		arg1 string
	}
	encodeTokensReturns struct {
		result1 string
		result2 error
	}
	encodeTokensReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *TokenEncoderDecoder) DecodeTokens(arg1 string, arg2 ...cryptr.DecodeTokensOption) (string, error) {
	fake.decodeTokensMutex.Lock()
	ret, specificReturn := fake.decodeTokensReturnsOnCall[len(fake.decodeTokensArgsForCall)]
	fake.decodeTokensArgsForCall = append(fake.decodeTokensArgsForCall, struct {
		arg1 string
		arg2 []cryptr.DecodeTokensOption
	}{arg1, arg2})
	fake.recordInvocation("DecodeTokens", []interface{}{arg1, arg2})
	fake.decodeTokensMutex.Unlock()
	if fake.DecodeTokensStub != nil {
		return fake.DecodeTokensStub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.decodeTokensReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *TokenEncoderDecoder) DecodeTokensCallCount() int {
	fake.decodeTokensMutex.RLock()
	defer fake.decodeTokensMutex.RUnlock()
	return len(fake.decodeTokensArgsForCall)
}

func (fake *TokenEncoderDecoder) DecodeTokensCalls(stub func(string, ...cryptr.DecodeTokensOption) (string, error)) {
	fake.decodeTokensMutex.Lock()
	defer fake.decodeTokensMutex.Unlock()
	fake.DecodeTokensStub = stub
}

func (fake *TokenEncoderDecoder) DecodeTokensArgsForCall(i int) (string, []cryptr.DecodeTokensOption) {
	fake.decodeTokensMutex.RLock()
	defer fake.decodeTokensMutex.RUnlock()
	argsForCall := fake.decodeTokensArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *TokenEncoderDecoder) DecodeTokensReturns(result1 string, result2 error) {
	fake.decodeTokensMutex.Lock()
	defer fake.decodeTokensMutex.Unlock()
	fake.DecodeTokensStub = nil
	fake.decodeTokensReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *TokenEncoderDecoder) DecodeTokensReturnsOnCall(i int, result1 string, result2 error) {
	fake.decodeTokensMutex.Lock()
	defer fake.decodeTokensMutex.Unlock()
	fake.DecodeTokensStub = nil
	if fake.decodeTokensReturnsOnCall == nil {
		fake.decodeTokensReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.decodeTokensReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *TokenEncoderDecoder) EncodeTokens(arg1 string) (string, error) {
	fake.encodeTokensMutex.Lock()
	ret, specificReturn := fake.encodeTokensReturnsOnCall[len(fake.encodeTokensArgsForCall)]
	fake.encodeTokensArgsForCall = append(fake.encodeTokensArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("EncodeTokens", []interface{}{arg1})
	fake.encodeTokensMutex.Unlock()
	if fake.EncodeTokensStub != nil {
		return fake.EncodeTokensStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.encodeTokensReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *TokenEncoderDecoder) EncodeTokensCallCount() int {
	fake.encodeTokensMutex.RLock()
	defer fake.encodeTokensMutex.RUnlock()
	return len(fake.encodeTokensArgsForCall)
}

func (fake *TokenEncoderDecoder) EncodeTokensCalls(stub func(string) (string, error)) {
	fake.encodeTokensMutex.Lock()
	defer fake.encodeTokensMutex.Unlock()
	fake.EncodeTokensStub = stub
}

func (fake *TokenEncoderDecoder) EncodeTokensArgsForCall(i int) string {
	fake.encodeTokensMutex.RLock()
	defer fake.encodeTokensMutex.RUnlock()
	argsForCall := fake.encodeTokensArgsForCall[i]
	return argsForCall.arg1
}

func (fake *TokenEncoderDecoder) EncodeTokensReturns(result1 string, result2 error) {
	fake.encodeTokensMutex.Lock()
	defer fake.encodeTokensMutex.Unlock()
	fake.EncodeTokensStub = nil
	fake.encodeTokensReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *TokenEncoderDecoder) EncodeTokensReturnsOnCall(i int, result1 string, result2 error) {
	fake.encodeTokensMutex.Lock()
	defer fake.encodeTokensMutex.Unlock()
	fake.EncodeTokensStub = nil
	if fake.encodeTokensReturnsOnCall == nil {
		fake.encodeTokensReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.encodeTokensReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *TokenEncoderDecoder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.decodeTokensMutex.RLock()
	defer fake.decodeTokensMutex.RUnlock()
	fake.encodeTokensMutex.RLock()
	defer fake.encodeTokensMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *TokenEncoderDecoder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cryptr.TokenEncoderDecoder = new(TokenEncoderDecoder)
