// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/dhoelle/redactr"
)

type Runner struct {
	HasConfigurationChangedStub        func() (bool, error)
	hasConfigurationChangedMutex       sync.RWMutex
	hasConfigurationChangedArgsForCall []struct {
	}
	hasConfigurationChangedReturns struct {
		result1 bool
		result2 error
	}
	hasConfigurationChangedReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	RestartStub        func()
	restartMutex       sync.RWMutex
	restartArgsForCall []struct {
	}
	RunStub        func() error
	runMutex       sync.RWMutex
	runArgsForCall []struct {
	}
	runReturns struct {
		result1 error
	}
	runReturnsOnCall map[int]struct {
		result1 error
	}
	StopStub        func()
	stopMutex       sync.RWMutex
	stopArgsForCall []struct {
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Runner) HasConfigurationChanged() (bool, error) {
	fake.hasConfigurationChangedMutex.Lock()
	ret, specificReturn := fake.hasConfigurationChangedReturnsOnCall[len(fake.hasConfigurationChangedArgsForCall)]
	fake.hasConfigurationChangedArgsForCall = append(fake.hasConfigurationChangedArgsForCall, struct {
	}{})
	fake.recordInvocation("HasConfigurationChanged", []interface{}{})
	fake.hasConfigurationChangedMutex.Unlock()
	if fake.HasConfigurationChangedStub != nil {
		return fake.HasConfigurationChangedStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.hasConfigurationChangedReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Runner) HasConfigurationChangedCallCount() int {
	fake.hasConfigurationChangedMutex.RLock()
	defer fake.hasConfigurationChangedMutex.RUnlock()
	return len(fake.hasConfigurationChangedArgsForCall)
}

func (fake *Runner) HasConfigurationChangedCalls(stub func() (bool, error)) {
	fake.hasConfigurationChangedMutex.Lock()
	defer fake.hasConfigurationChangedMutex.Unlock()
	fake.HasConfigurationChangedStub = stub
}

func (fake *Runner) HasConfigurationChangedReturns(result1 bool, result2 error) {
	fake.hasConfigurationChangedMutex.Lock()
	defer fake.hasConfigurationChangedMutex.Unlock()
	fake.HasConfigurationChangedStub = nil
	fake.hasConfigurationChangedReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *Runner) HasConfigurationChangedReturnsOnCall(i int, result1 bool, result2 error) {
	fake.hasConfigurationChangedMutex.Lock()
	defer fake.hasConfigurationChangedMutex.Unlock()
	fake.HasConfigurationChangedStub = nil
	if fake.hasConfigurationChangedReturnsOnCall == nil {
		fake.hasConfigurationChangedReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.hasConfigurationChangedReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *Runner) Restart() {
	fake.restartMutex.Lock()
	fake.restartArgsForCall = append(fake.restartArgsForCall, struct {
	}{})
	fake.recordInvocation("Restart", []interface{}{})
	fake.restartMutex.Unlock()
	if fake.RestartStub != nil {
		fake.RestartStub()
	}
}

func (fake *Runner) RestartCallCount() int {
	fake.restartMutex.RLock()
	defer fake.restartMutex.RUnlock()
	return len(fake.restartArgsForCall)
}

func (fake *Runner) RestartCalls(stub func()) {
	fake.restartMutex.Lock()
	defer fake.restartMutex.Unlock()
	fake.RestartStub = stub
}

func (fake *Runner) Run() error {
	fake.runMutex.Lock()
	ret, specificReturn := fake.runReturnsOnCall[len(fake.runArgsForCall)]
	fake.runArgsForCall = append(fake.runArgsForCall, struct {
	}{})
	fake.recordInvocation("Run", []interface{}{})
	fake.runMutex.Unlock()
	if fake.RunStub != nil {
		return fake.RunStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.runReturns
	return fakeReturns.result1
}

func (fake *Runner) RunCallCount() int {
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	return len(fake.runArgsForCall)
}

func (fake *Runner) RunCalls(stub func() error) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = stub
}

func (fake *Runner) RunReturns(result1 error) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = nil
	fake.runReturns = struct {
		result1 error
	}{result1}
}

func (fake *Runner) RunReturnsOnCall(i int, result1 error) {
	fake.runMutex.Lock()
	defer fake.runMutex.Unlock()
	fake.RunStub = nil
	if fake.runReturnsOnCall == nil {
		fake.runReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.runReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Runner) Stop() {
	fake.stopMutex.Lock()
	fake.stopArgsForCall = append(fake.stopArgsForCall, struct {
	}{})
	fake.recordInvocation("Stop", []interface{}{})
	fake.stopMutex.Unlock()
	if fake.StopStub != nil {
		fake.StopStub()
	}
}

func (fake *Runner) StopCallCount() int {
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	return len(fake.stopArgsForCall)
}

func (fake *Runner) StopCalls(stub func()) {
	fake.stopMutex.Lock()
	defer fake.stopMutex.Unlock()
	fake.StopStub = stub
}

func (fake *Runner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.hasConfigurationChangedMutex.RLock()
	defer fake.hasConfigurationChangedMutex.RUnlock()
	fake.restartMutex.RLock()
	defer fake.restartMutex.RUnlock()
	fake.runMutex.RLock()
	defer fake.runMutex.RUnlock()
	fake.stopMutex.RLock()
	defer fake.stopMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Runner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ redactr.Runner = new(Runner)
