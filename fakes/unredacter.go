// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/dhoelle/redactr"
)

type Unredacter struct {
	UnredactStub        func(string) (string, error)
	unredactMutex       sync.RWMutex
	unredactArgsForCall []struct {
		arg1 string
	}
	unredactReturns struct {
		result1 string
		result2 error
	}
	unredactReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Unredacter) Unredact(arg1 string) (string, error) {
	fake.unredactMutex.Lock()
	ret, specificReturn := fake.unredactReturnsOnCall[len(fake.unredactArgsForCall)]
	fake.unredactArgsForCall = append(fake.unredactArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Unredact", []interface{}{arg1})
	fake.unredactMutex.Unlock()
	if fake.UnredactStub != nil {
		return fake.UnredactStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.unredactReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Unredacter) UnredactCallCount() int {
	fake.unredactMutex.RLock()
	defer fake.unredactMutex.RUnlock()
	return len(fake.unredactArgsForCall)
}

func (fake *Unredacter) UnredactCalls(stub func(string) (string, error)) {
	fake.unredactMutex.Lock()
	defer fake.unredactMutex.Unlock()
	fake.UnredactStub = stub
}

func (fake *Unredacter) UnredactArgsForCall(i int) string {
	fake.unredactMutex.RLock()
	defer fake.unredactMutex.RUnlock()
	argsForCall := fake.unredactArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Unredacter) UnredactReturns(result1 string, result2 error) {
	fake.unredactMutex.Lock()
	defer fake.unredactMutex.Unlock()
	fake.UnredactStub = nil
	fake.unredactReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *Unredacter) UnredactReturnsOnCall(i int, result1 string, result2 error) {
	fake.unredactMutex.Lock()
	defer fake.unredactMutex.Unlock()
	fake.UnredactStub = nil
	if fake.unredactReturnsOnCall == nil {
		fake.unredactReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.unredactReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *Unredacter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.unredactMutex.RLock()
	defer fake.unredactMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Unredacter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ redactr.Unredacter = new(Unredacter)
