// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/dhoelle/redactr"
)

type TokenRedacterUnredacter struct {
	RedactTokensStub        func(string) (string, error)
	redactTokensMutex       sync.RWMutex
	redactTokensArgsForCall []struct {
		arg1 string
	}
	redactTokensReturns struct {
		result1 string
		result2 error
	}
	redactTokensReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	UnredactTokensStub        func(string, ...redactr.UnredactTokensOption) (string, error)
	unredactTokensMutex       sync.RWMutex
	unredactTokensArgsForCall []struct {
		arg1 string
		arg2 []redactr.UnredactTokensOption
	}
	unredactTokensReturns struct {
		result1 string
		result2 error
	}
	unredactTokensReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *TokenRedacterUnredacter) RedactTokens(arg1 string) (string, error) {
	fake.redactTokensMutex.Lock()
	ret, specificReturn := fake.redactTokensReturnsOnCall[len(fake.redactTokensArgsForCall)]
	fake.redactTokensArgsForCall = append(fake.redactTokensArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("RedactTokens", []interface{}{arg1})
	fake.redactTokensMutex.Unlock()
	if fake.RedactTokensStub != nil {
		return fake.RedactTokensStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.redactTokensReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *TokenRedacterUnredacter) RedactTokensCallCount() int {
	fake.redactTokensMutex.RLock()
	defer fake.redactTokensMutex.RUnlock()
	return len(fake.redactTokensArgsForCall)
}

func (fake *TokenRedacterUnredacter) RedactTokensCalls(stub func(string) (string, error)) {
	fake.redactTokensMutex.Lock()
	defer fake.redactTokensMutex.Unlock()
	fake.RedactTokensStub = stub
}

func (fake *TokenRedacterUnredacter) RedactTokensArgsForCall(i int) string {
	fake.redactTokensMutex.RLock()
	defer fake.redactTokensMutex.RUnlock()
	argsForCall := fake.redactTokensArgsForCall[i]
	return argsForCall.arg1
}

func (fake *TokenRedacterUnredacter) RedactTokensReturns(result1 string, result2 error) {
	fake.redactTokensMutex.Lock()
	defer fake.redactTokensMutex.Unlock()
	fake.RedactTokensStub = nil
	fake.redactTokensReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *TokenRedacterUnredacter) RedactTokensReturnsOnCall(i int, result1 string, result2 error) {
	fake.redactTokensMutex.Lock()
	defer fake.redactTokensMutex.Unlock()
	fake.RedactTokensStub = nil
	if fake.redactTokensReturnsOnCall == nil {
		fake.redactTokensReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.redactTokensReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *TokenRedacterUnredacter) UnredactTokens(arg1 string, arg2 ...redactr.UnredactTokensOption) (string, error) {
	fake.unredactTokensMutex.Lock()
	ret, specificReturn := fake.unredactTokensReturnsOnCall[len(fake.unredactTokensArgsForCall)]
	fake.unredactTokensArgsForCall = append(fake.unredactTokensArgsForCall, struct {
		arg1 string
		arg2 []redactr.UnredactTokensOption
	}{arg1, arg2})
	fake.recordInvocation("UnredactTokens", []interface{}{arg1, arg2})
	fake.unredactTokensMutex.Unlock()
	if fake.UnredactTokensStub != nil {
		return fake.UnredactTokensStub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.unredactTokensReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *TokenRedacterUnredacter) UnredactTokensCallCount() int {
	fake.unredactTokensMutex.RLock()
	defer fake.unredactTokensMutex.RUnlock()
	return len(fake.unredactTokensArgsForCall)
}

func (fake *TokenRedacterUnredacter) UnredactTokensCalls(stub func(string, ...redactr.UnredactTokensOption) (string, error)) {
	fake.unredactTokensMutex.Lock()
	defer fake.unredactTokensMutex.Unlock()
	fake.UnredactTokensStub = stub
}

func (fake *TokenRedacterUnredacter) UnredactTokensArgsForCall(i int) (string, []redactr.UnredactTokensOption) {
	fake.unredactTokensMutex.RLock()
	defer fake.unredactTokensMutex.RUnlock()
	argsForCall := fake.unredactTokensArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *TokenRedacterUnredacter) UnredactTokensReturns(result1 string, result2 error) {
	fake.unredactTokensMutex.Lock()
	defer fake.unredactTokensMutex.Unlock()
	fake.UnredactTokensStub = nil
	fake.unredactTokensReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *TokenRedacterUnredacter) UnredactTokensReturnsOnCall(i int, result1 string, result2 error) {
	fake.unredactTokensMutex.Lock()
	defer fake.unredactTokensMutex.Unlock()
	fake.UnredactTokensStub = nil
	if fake.unredactTokensReturnsOnCall == nil {
		fake.unredactTokensReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.unredactTokensReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *TokenRedacterUnredacter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.redactTokensMutex.RLock()
	defer fake.redactTokensMutex.RUnlock()
	fake.unredactTokensMutex.RLock()
	defer fake.unredactTokensMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *TokenRedacterUnredacter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ redactr.TokenRedacterUnredacter = new(TokenRedacterUnredacter)
